// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (431B)
// NAME-service/handlers/handlers.gotemplate (62B)
// NAME-service/handlers/hooks.gotemplate (114B)
// NAME-service/handlers/middlewares.gotemplate (75B)
// NAME-service/svc/client/grpc/client.gotemplate (3.184kB)
// NAME-service/svc/client/http/client.gotemplate (105B)
// NAME-service/svc/config.gotemplate (328B)
// NAME-service/svc/endpoints.gotemplate (4.25kB)
// NAME-service/svc/server/run.gotemplate (3.27kB)
// NAME-service/svc/transport_grpc.gotemplate (2.962kB)
// NAME-service/svc/transport_http.gotemplate (106B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbd\x6e\xc2\x30\x14\x85\xe7\xdc\xa7\x38\xca\x14\x86\xda\x3b\x12\x13\xe9\xc0\x52\x10\xd0\xee\x26\xb9\x76\xac\x06\x07\xd9\x4e\x10\x8a\xfc\xee\x55\x12\x5a\x31\x74\xf2\xcf\xf7\x5d\x9d\x63\x4b\x89\x6d\x57\x33\x0c\x3b\xf6\x2a\x72\x8d\xcb\x03\xd1\xf7\x21\x08\x94\x7b\x7c\xec\xcf\x78\x2f\x77\x67\x41\x52\xe2\xc8\xbe\x77\xce\x3a\xb3\x08\xb8\xdb\xb6\x45\x37\xb0\xbf\x7b\x1b\x19\xb1\xb1\x01\xda\xb6\x3c\xcb\x5f\xec\x83\xed\xdc\x1a\xe3\x28\x9e\xfb\x94\x5e\x00\x4a\x15\xf9\x95\x4e\xe7\x94\x88\x6e\xaa\xfa\x56\x86\x71\x55\xd6\x11\xd9\xeb\xad\xf3\x11\x05\x65\xb9\x6e\x95\xc9\x89\x32\x29\x71\x9e\xa2\x4e\xec\x07\x5b\x31\x65\xf9\x38\x8a\xdd\xec\x1d\x54\x6c\xf0\x96\x12\x64\x18\x2a\x19\xd8\x0f\xec\xf3\xff\x85\x46\xb9\xba\x65\x1f\x72\x5a\x11\xe9\xde\x55\x73\x60\xb1\xc2\x38\x27\x7c\xde\x6a\x15\x19\xaa\xae\x3d\x87\xc0\x01\x56\x23\x36\xfc\x40\xa3\x06\xc6\x85\xd9\xfd\xbd\x3c\xb2\x9b\x3e\x6d\xaa\x17\x28\x9b\x16\x71\x50\x3e\x70\xb1\x22\xca\x2a\x6d\xb0\xde\x60\xa9\x22\x4a\xd6\xaa\x6f\xe3\xb6\x73\xda\x9a\x05\x6e\xf0\xdb\x44\x9c\xf8\x49\x8a\x4a\x9b\x69\xf8\x39\x75\xec\xdd\x72\x93\xe8\x27\x00\x00\xff\xff\x27\x3a\x23\x3c\xaf\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 431, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x1e, 0xa2, 0x4f, 0x52, 0x2a, 0x32, 0x30, 0x4c, 0x20, 0x0, 0x3, 0x86, 0x8a, 0x7c, 0xdb, 0xa3, 0x40, 0x63, 0x8a, 0x70, 0x23, 0xb1, 0xdf, 0x38, 0x30, 0x9e, 0xde, 0x18, 0xa5, 0x76, 0x59}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\xb1\x0d\x03\x21\x0c\x46\xe1\x3e\x53\xb8\x46\x51\x3c\x4c\x26\x40\xe1\x8f\x89\x20\xf8\x84\x7d\x15\x62\xf7\x13\x05\xd5\xb5\x4f\xdf\x1b\x83\x03\xbd\x01\xf2\x7e\x9a\xb1\xa0\x89\x96\x9f\x73\x8e\x2d\x55\x74\x63\xc7\xff\xa8\xd1\x61\x9c\x55\xcb\x4b\x94\xbe\xda\x69\x57\xfa\x68\xc2\x93\xee\xdb\xc2\xb6\xf5\x42\x82\x46\x81\xe7\x7c\x5c\x01\x00\x00\xff\xff\x81\x74\x2e\x0e\x72\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 114, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x1a, 0x90, 0x39, 0xa9, 0x14, 0x59, 0xbf, 0x4, 0xb0, 0xfd, 0xa3, 0xaf, 0xdf, 0x86, 0x15, 0x67, 0xf0, 0xc7, 0xc, 0xe3, 0x4c, 0xfd, 0xd0, 0x87, 0xea, 0xb3, 0xa1, 0xd2, 0x85, 0x8a, 0x36}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\x26\x5d\xc7\x3f\x86\xca\x16\xc2\xaf\xe0\xaa\xef\x61\xea\x76\x54\x40\xfb\x00\x64\x5c\xbc\x3b\x36\x4f\x58\x11\x38\xbe\xc5\x47\xb0\xe8\xb7\x56\x3b\x10\x7a\x20\x0d\x1e\x84\x5c\xc7\x26\x38\xa6\x5b\x1a\xad\x51\x7a\x65\x34\x87\x8f\x1e\x94\x23\xf2\xc9\x8f\x45\xd7\x1a\xed\xd4\x83\x6a\x94\xdf\x83\x59\x06\x55\xa4\x68\x1a\xb4\xe0\x0d\x54\x4a\x34\x25\x08\x5d\x41\x23\x3c\x5a\x90\x8d\x71\x58\x46\xd0\xb3\x4f\xb6\xdc\x6a\x49\x39\xe5\xb4\x08\x97\x54\x2f\x9f\x87\xd0\x73\xa3\x75\x09\xa6\x25\x9c\x03\xce\xd3\xf2\xe7\xb0\x50\x40\xde\x3e\xf0\x57\x3d\x40\x5f\x68\x4b\x08\x8a\x14\xd0\xb1\x6c\x27\x2c\x48\x99\xaa\x99\x1b\xbd\x54\x35\x63\x19\x35\xd1\x8f\x12\x96\x70\x3d\x03\x2b\x74\x8d\x87\x38\x1d\xcb\x32\xb4\x96\x0c\xcb\xfc\x4f\x29\x0b\x96\x65\x6a\x49\x0e\xe1\x8f\x19\x68\xd5\x04\x44\x16\x19\xa4\xef\x14\xcc\xf1\xff\xac\x68\x73\xb4\xb6\x84\x89\x14\x5a\x1b\x0f\xa2\x6d\x9b\x7d\xf2\x3c\x21\x47\x3d\xcb\x7a\xc6\x32\x39\x2a\xc4\x51\xa4\x6f\xdf\x8f\xda\xe2\xa8\x52\x0a\x77\xca\xfa\x0e\x97\xc6\x62\x4e\xc9\xa4\xb6\xfe\x2a\x9a\x2d\xba\x7b\xf3\xe1\x6e\x31\xff\x94\xba\x35\x97\x92\xaf\x50\x54\x68\x5d\x51\x94\x14\x3e\xeb\xba\x2b\x78\x54\x7e\x05\x17\x1e\x29\x38\xef\x7b\x96\x8d\x56\xdb\x75\x4d\x64\x92\xe9\xc2\x23\x4f\x67\x32\xf2\x4b\xd1\x08\x19\x39\xbb\x50\x03\x68\x50\xe1\x13\xfa\x95\xa9\x5c\x04\x06\xee\xbb\xee\xde\xfc\x6b\x1e\xd1\xc2\x85\x4a\x22\xbd\x4f\xa7\x01\x86\x63\xc1\x87\x95\xb0\x2b\xf0\x4b\x61\xde\xde\x38\x83\x63\x46\x6e\xf1\x31\x92\x92\xc7\xbd\xc4\x88\x2e\xd3\xef\x49\xd7\x0d\x35\xf5\x3d\xef\xba\x71\xbe\x71\x71\x32\x86\xaa\x97\x8b\xef\xb5\x34\x15\x12\xa9\x23\xeb\x1d\xfe\xdc\xa2\xf3\x03\xe6\x06\x4f\x62\xc2\x09\xc1\x01\x14\x1a\xf6\x83\x09\xe4\x5e\x28\x3e\x98\xef\xf7\xed\x90\x48\xd7\x0f\xd8\xa3\x16\xe1\x9c\xa7\xf5\xe2\x40\x55\x5e\x84\x95\xa4\x08\xea\x2a\xa9\x98\x7e\x0d\x3f\xd8\xd0\xa9\x6e\x27\x0f\x7b\x5d\x47\x80\xb1\x86\x2f\x05\xa4\x0b\x23\xb8\x7b\xc5\xfd\x35\x00\x9c\x13\xb5\x7c\x8e\x9d\xf5\x25\x1d\x10\x16\xef\x76\x22\x07\xa2\x4a\x10\xe9\x62\xe7\x73\x88\x53\xe3\x2c\xb3\x74\x1d\x09\x38\xbe\x2d\x79\xdc\x31\x40\xfe\xa6\xfb\xc5\xaf\x44\xb8\xc9\x76\x68\xbd\x03\x41\x7e\xc3\x1d\x77\xa2\x0e\xb0\x48\x87\xd6\x1b\x10\xb0\x75\x68\xaf\x2a\xb3\x11\x4a\xbf\x01\x8d\x31\x38\x2c\xac\xda\x08\xab\x9a\x3d\xed\x59\x6e\x1b\x50\x1a\x44\xba\x74\xd2\x1d\x77\xb6\x90\xfc\x07\xa4\x43\xcc\xe7\xf1\x7f\x19\x5a\xfc\x2e\x24\xa3\xb4\x47\xbb\x14\x12\xbb\xbe\x80\x7c\xf4\x35\xbe\xe8\x62\xde\xd7\xb3\xe7\x7d\x3c\xbf\xfc\x75\xcb\x15\x87\x0e\x09\x0e\x06\xc5\x0e\xfd\xf3\x42\xb9\x78\x18\x7e\x4b\xb9\x73\xe7\xe6\xa4\x70\x71\x43\x42\xbc\xa5\xdb\xaf\x35\x89\x01\x82\x80\x67\x44\x0e\xa8\xdf\x12\xee\x5c\x1d\xa7\x74\x1b\x32\xf8\x4d\xd5\x7e\x86\x19\x94\xf2\x39\xa1\x58\x30\xbc\x21\xd8\xcf\x57\x72\x31\xbf\x6f\xf1\x68\xda\x81\xf3\x76\x2b\x3d\x05\x4b\x83\x00\xbe\x7d\x77\xde\x2a\x5d\xa7\x93\x39\x9e\x36\x51\x18\xaa\x3b\x7c\x05\x01\x36\xa6\x52\x4b\x85\x2e\xce\xee\xc3\xb3\x80\x26\x69\x88\x76\xb4\x9f\xb6\xe6\x97\xe3\x04\x8a\x58\x2e\x8b\x6c\xce\xfd\xd3\x30\xa7\xbe\xa0\xae\xf2\x35\xee\xc3\x70\x8f\x19\x15\xc7\xce\xba\x43\xad\xc1\xad\x81\x53\x8e\xc3\x40\x36\xc3\x94\x83\x19\x90\x4b\x36\x1e\xd1\x34\xf6\xfa\x14\xff\xdc\xac\x0c\xb9\x0c\xe4\x14\x70\x6a\xea\x8e\xbb\xf3\x45\x76\xd2\x3f\xbd\x6e\x86\x4d\x05\x97\xc3\xcb\x91\x7f\xba\x29\x5e\x22\x42\xf2\x34\x27\x5b\xa1\xc6\xca\x64\xc3\x13\x65\xfd\xfc\x44\x09\xe9\x85\xe9\xa8\x96\xb0\x2b\xc1\x04\x9b\xf4\x4f\x3c\x54\x93\xaf\x0b\x9e\xa7\xdc\xff\x22\x63\x1c\xa4\xd1\xf1\x8c\x1e\x23\xc4\x77\xf8\x2c\x61\x5d\xc2\x2e\x4c\x90\x3e\x3c\x4b\xe2\x23\x27\x42\xc7\xcf\x9c\xcb\x4d\x05\x33\x38\x14\xf0\x8f\x51\x3a\xbf\xdc\x54\xe5\xf3\xd2\x82\xf6\x44\xaf\x9c\xf3\xa2\x18\xdc\x25\x66\xa4\x7f\x8a\xec\xff\x1f\x00\x00\xff\xff\x00\xce\x0e\xa6\x70\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3184, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x72, 0x1f, 0xe5, 0x3a, 0x45, 0x1, 0x91, 0xd8, 0x5b, 0xa8, 0x47, 0x45, 0x45, 0x98, 0xee, 0x0, 0xf5, 0xc1, 0x3c, 0x43, 0xf0, 0x86, 0x3c, 0xec, 0xbe, 0x2d, 0x84, 0xed, 0x1a, 0x17, 0x6c}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcConfigGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xc1\x4a\x03\x41\x0c\x06\xe0\xf3\xe6\x29\x42\x4f\x7a\xb0\xf3\x0c\x52\xb5\x1e\x4b\xe9\x0b\x4c\x67\xb2\xb3\xa1\x36\x33\x26\x99\x82\x88\xef\x2e\xab\xac\x20\x0a\x0d\xe4\xf2\xf3\x25\x81\xb4\x98\x4e\xb1\x10\xda\x25\x01\xf0\xb9\x55\x75\xbc\x81\x61\x72\x6f\xae\x51\xec\x2b\x58\x15\xf6\xa9\x1f\xd7\xa9\x9e\x43\xa9\x77\x27\xf6\x30\xf7\x0f\x08\x33\x5f\xc1\x2d\x40\x08\xb8\xa9\x32\x72\xc1\x54\xc5\x23\x8b\xa1\x4f\x84\x4a\xaf\x9d\x95\x32\x8e\x4c\x2f\xd9\x70\xac\x8a\xda\x45\x58\x0a\x46\x34\xd2\x0b\x29\xf8\x5b\xa3\x65\xda\x5c\x7b\x72\x7c\x87\xe1\xf9\x70\xd8\xdd\xe7\xac\xf8\xb7\xcc\x95\xa5\xc0\xf0\x40\xc7\x5e\xfe\x37\x0b\xd9\xee\x77\x9b\x2b\x5b\xb6\x24\xa4\x9c\xe6\x7b\x7b\xb2\x56\xc5\xe8\x51\x52\xcd\xa4\xf8\xeb\x1b\xeb\xef\x74\x31\x4f\x5d\x12\x7c\xc0\x67\x00\x00\x00\xff\xff\xc0\x70\xbf\x81\x48\x01\x00\x00")

func svcConfigGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcConfigGotemplate,
		"svc/config.gotemplate",
	)
}

func svcConfigGotemplate() (*asset, error) {
	bytes, err := svcConfigGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/config.gotemplate", size: 328, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x39, 0x2b, 0x91, 0x93, 0x52, 0x93, 0xef, 0x7f, 0x8c, 0x4c, 0x5c, 0x3b, 0x9, 0x2d, 0xf7, 0xf2, 0x5, 0x0, 0x79, 0xcf, 0x24, 0xf6, 0xc7, 0x3d, 0x6f, 0x63, 0xb1, 0x3d, 0x81, 0xb1, 0x3b}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xeb\xb8\x15\x5e\x8b\xbf\xe2\x8c\x90\xce\x95\x2e\x14\x79\x9f\x41\x16\x9d\x7b\xd3\x36\xc0\xdc\x07\x26\x69\xbb\x18\x0c\x06\xb4\x74\x64\x13\x91\x48\x0d\x49\xd9\x71\x05\xfd\xf7\xe2\x90\x92\x4c\xdb\x4a\x6e\xda\x55\x51\xcc\x22\xb0\xcd\xc7\xc7\xef\x7c\xe7\xc1\xc3\xac\x56\x60\xcb\x9a\xad\x56\xf0\x41\x95\x08\x1b\x94\xa8\xb9\xc5\x12\xd6\x07\xb0\xba\x33\x26\x87\x8f\x5f\xe0\xf3\x97\x47\xb8\xfb\x78\xff\x98\xd3\xc2\x9f\x51\x77\x52\x0a\xb9\xf1\x0b\x60\x2f\xea\x1a\xd4\x0e\xf5\x5e\x0b\x8b\x60\xb7\xc2\x40\x25\x6a\x74\x8b\xff\x81\xda\x08\x25\x6f\xa0\xef\xf3\xf1\xfb\x30\x04\x13\xf0\x91\x5b\x0c\x67\xe9\xf7\x30\x30\xd6\xf2\xe2\x89\x6f\x10\xcc\xae\x60\xb4\xfe\x71\x82\x85\x42\x49\xcb\x85\x34\xd0\xa0\xdd\xaa\xd2\x80\x55\xd0\xf0\x27\x04\x21\x4b\xb1\x13\x65\xc7\x6b\x40\x59\xb6\x4a\x48\x6b\xa0\xd2\xaa\x01\x83\x7a\x27\x0a\x34\x19\x21\x69\xfc\xbd\x43\x63\x81\xcb\x12\x34\x9a\x56\x49\x83\x60\x0f\x2d\x3a\x24\x5a\x4a\x46\x28\x83\x47\x94\x0c\xb8\x81\x3d\xd6\x35\x7d\xa2\x2c\x54\x89\xda\x10\x00\xe1\x95\x38\xfe\xae\x94\x1e\x37\x3a\xb4\xcc\x0d\x70\x12\xa7\x02\xd5\x69\x30\x5d\xdb\x2a\x4d\xe2\x5a\xcd\xa5\xa1\xef\x74\x9c\xe0\xb5\xf8\x17\xb7\x42\x49\x42\xab\x94\x6e\xb8\x35\x39\x63\xa2\x71\x2b\x12\x16\xc5\x55\x63\x63\x16\xc5\x64\x39\x3e\xdb\x98\xb1\x28\xde\x08\xbb\xed\xd6\x79\xa1\x9a\xd5\x46\x5d\x3f\x09\xbb\xa2\xbf\x89\x31\x2d\x69\xd7\x10\xf7\x7d\xfe\xf5\xc7\x7b\x07\xf4\x95\xdb\x2d\x5c\x0f\x43\xcc\x22\x96\x3a\x49\xef\x66\x91\x0a\x55\xd7\x58\x58\x33\xb1\xb5\xdb\xc0\x78\xb0\x5b\x6e\xa1\x50\x4d\x4b\xa6\x71\x09\xbc\x2c\x27\x45\x73\xb8\xb7\xef\x0c\x81\x35\xc8\xa5\x25\x01\xd7\x08\x9d\xc1\x92\x94\xe2\xb0\xc5\xba\x45\x0d\xc6\xea\xae\xb0\x19\x4d\x8f\x47\x2d\x9f\x24\xa4\x55\xc0\x09\xce\x08\xb9\xa9\x11\x5a\xae\x79\x83\x16\x35\x05\x13\x8d\xdf\x4b\xe0\xde\x47\x3a\x03\x61\xdf\x19\x3a\xac\xea\x6a\xa7\x75\xd5\xc9\x82\x74\x1c\x29\x4b\x24\xa9\x15\xa8\xd6\xc5\x34\x28\xda\xdb\xa2\xbe\x9e\x0e\x24\xc0\x35\x37\xc2\xe4\xf0\x17\xa5\x01\x9f\x79\xd3\xd6\x98\xc1\x41\x75\xd0\x88\xcd\xd6\x42\xcb\x0d\xf9\x39\x90\x8a\x08\xce\x07\xf9\x73\x5a\xad\xca\xae\x40\x27\x03\x97\xb0\xb5\xb6\xcd\xff\xc6\x65\x59\x13\xc7\xbd\xb0\x5b\x40\x5e\x6c\xc7\x70\x85\x64\x3a\x3d\x85\xbd\xd0\x58\x42\xd7\x7a\x50\xd3\x62\x21\x2a\x51\x40\xcb\xed\x36\x87\xe4\xde\xf1\x13\x86\xf0\xd7\x7c\x5d\x1f\x80\x43\x23\x8c\xf5\xa1\x0e\x25\x1a\xb1\x91\xb4\x55\xc8\x9d\x7a\x42\x27\xe5\x83\x77\xcb\x9c\x1a\x8e\x22\x9e\x3a\xdb\x3b\x83\x20\x26\x25\xf3\x34\x54\xb7\xa8\x05\x4a\x7b\xaa\x6e\xe0\xb8\x63\x96\xd5\x07\xca\x45\x0f\x87\xe5\x6b\x6e\xa4\x7c\xf0\x5a\x09\x52\xb8\x41\x1f\x56\x47\xbe\x42\x5a\xd4\x15\xa7\x80\x5a\xf6\x04\x81\xcd\x87\x2d\x67\x7a\x67\x7c\x4d\x1a\x53\x6b\xe5\xfc\xf0\x19\xf7\x1f\x46\x7b\x0a\xd5\xac\x85\x74\x3a\x35\x23\xc5\xc0\xb1\xd9\x58\x0f\x6c\xa7\x25\x08\x17\xc9\x44\xb0\xe0\x75\x8d\xda\x07\xf3\x48\x36\x67\xce\x9c\x0b\x41\x7b\xd6\xf7\x9a\xcb\x0d\xc2\x95\x80\x9b\x5b\xc8\xa7\xf5\x9f\xbc\x33\x86\x81\x45\x7d\x7f\x25\xf2\xcf\xbc\xc1\x61\x98\xf6\x03\xc0\x6c\x44\x3e\x0d\xb2\xbe\xbf\xa6\xd1\x61\x60\xc3\x69\xae\xbe\xe1\x10\x8a\x4e\x48\x02\x86\x29\x04\xe7\x26\x85\x7d\x86\xb1\x92\xe4\x1f\xfc\x67\x46\xd1\xf0\xbe\x5d\xe7\x7d\xff\x57\x45\xcb\xe0\x4a\xe4\x3f\xfb\x3a\xf9\x78\x68\x71\xdc\x9a\x42\x72\xb9\xc8\x17\xd0\x60\x55\x06\xa8\xb5\xd2\x29\xf4\x2c\x8a\xa6\x02\xeb\x06\x89\x30\xe6\x0b\x1a\x10\x27\xe2\x90\xb2\x28\x12\x95\x5b\xfa\xdd\x2d\x48\x51\x3b\x8c\x68\xf4\x8a\x14\xb5\x83\x61\x51\x34\xb0\x79\x74\x3a\x21\x7f\x0b\xb7\x34\x23\x14\x16\x0d\xac\xef\xbd\xbc\x6c\xb5\xda\x6b\xde\x7e\xe2\x4f\x78\x27\xcb\xaf\x4e\xfc\x13\xff\xd2\x8c\xfe\xa7\xe6\xed\x31\x48\x89\x15\x8d\x24\x63\x15\x04\x77\xf0\xec\x0a\x7f\xd4\xc3\x58\xa4\x30\xc4\x71\xd4\x8c\xd5\x42\x6e\xce\x66\x5c\x4d\x49\x5e\x06\x4a\x2f\x83\x64\x61\x88\x0d\xcc\x79\xff\x33\xee\x2f\xf8\x27\xe9\x82\x4d\x3d\x9b\x74\xfc\x1e\xcf\x27\x7b\x0a\x3e\xa7\xc5\xc5\xd4\x31\xe6\x07\xe6\x4f\x4c\x48\x45\x78\x7f\xb1\x32\x85\xff\x4d\xa5\x02\xcb\x4f\xd0\x27\xa6\x29\x59\x46\x99\x47\xa3\x27\xe9\xe7\x2a\xfa\x95\x45\x97\x7e\x3e\xa9\xc3\x8c\xbc\xb2\xb8\x94\x94\x3e\x2b\x09\x6c\x29\xfe\x8d\x17\x26\xdc\xfb\x0d\x93\x4e\x32\xc3\x29\xb2\x98\xd7\x53\xb3\x33\xc7\x6e\x4f\x59\x3c\xb7\x3d\xc1\xb0\xcf\xd0\x20\x75\x09\xfd\x77\xb2\x68\xc4\x58\x4a\xb0\x8b\x0a\xe1\xf6\xed\xe6\x6c\x37\xf9\x59\xe5\x71\x8c\xfc\xaa\x85\x44\x5f\x4a\x75\x9f\xec\xf3\xcc\x6e\xcc\x60\x3f\xec\xd4\xf7\x89\x1c\x24\xb4\x0b\xb9\x3f\xd7\xf5\xdd\x73\x81\xad\x05\x8a\x4c\xe3\xef\xe0\x59\xbd\x4a\x60\x5d\x52\x03\x32\x06\xf2\xb1\x9a\x3b\xf7\xba\xcb\x6b\xa1\xaf\xca\x3f\x89\xb2\xac\x71\xcf\xb5\x6f\x6f\xff\x6e\xa6\x86\x97\x5a\xbd\xb6\xad\x0f\x74\x07\xd1\xbd\x6a\x09\xbc\x99\x57\xbb\xc6\x01\x77\xa8\x0f\xb3\x2b\xa9\xe6\xd2\x15\x33\xb5\x52\x84\xf7\xa5\xa5\xb6\x82\xae\xd6\x2c\xb8\xd9\x0a\x2e\xa9\xad\xa2\x66\x04\x4b\xda\xb6\x3e\x80\x24\x1f\xf8\x76\x0b\x9f\x8b\xba\x2b\xb1\xf4\xbd\xee\x1a\x89\x02\xd9\xdc\x62\x99\x5f\xa8\x91\x1c\x39\x65\x10\x3f\x58\x6e\x3b\x13\x67\x10\x7f\x15\x72\x13\xa7\x6c\xba\x3b\xde\x07\x97\xc7\x4b\xfb\x61\x41\x95\xec\xc8\x26\xcf\x73\x9f\xbf\x2e\x9c\x84\x1c\x87\x6f\x6e\xa1\xe1\xed\x2f\x7e\xea\x57\x2f\x7f\x3f\x90\xfb\xe9\xce\xfb\xd6\xdd\x16\x45\x71\x10\x51\xf1\x0d\xf4\x43\x36\x6e\xf5\xee\x8f\x06\xc6\x22\xf2\xc6\x6f\x44\xc5\x85\xaf\x83\x9c\x69\xf5\xfe\x8e\xf9\x2d\x03\xf5\x44\xd3\x13\xb1\x5f\xf0\xf9\xd7\x1f\xe0\x3b\xf5\xe4\x43\xb1\xe5\x52\x14\x49\xd5\xd8\xfc\xa1\xd5\x42\xda\x2a\x89\xef\x26\x88\xd9\x83\xef\xfe\x64\xde\x41\xa9\xd0\x80\x54\x16\xf0\x59\x18\xfb\x03\x18\xc4\xd0\xf1\x73\xec\x98\x7c\xa3\x62\x22\x95\xa6\xe3\x0d\x56\x62\x8d\x16\x93\x89\x81\x9b\x3b\x1a\x20\x64\x71\xa4\x3f\xcb\xf7\x76\xa1\x44\xe5\x20\x6e\x6f\xe1\x44\xb2\x31\xd3\x16\xef\x61\xb8\x0d\x98\x27\x8b\x4b\xd2\x29\xf5\x4e\x24\xf7\x69\xf7\x13\x5f\x63\x8d\xe5\x31\x1a\xfc\xdb\x70\x83\x76\x8a\xdd\xb0\xdd\xf7\x21\xbc\xdf\xa2\x9c\x67\x55\x10\xae\x23\x98\x8f\xba\xcc\x67\xd9\x98\x08\x9d\x5f\x0c\xfe\xc1\xc9\xfd\xab\x55\x14\xd4\xf5\x6a\x51\xf8\xe7\x48\xc0\x61\x2b\x8a\xad\xdb\x6a\x50\x2e\x51\x18\x5b\xbd\x71\xf7\xd4\xe8\x2a\x3d\x36\x7a\x97\x56\xb9\x72\x7b\x7e\x37\xbd\x7a\x2d\xbf\x64\xd7\x7f\x5d\x9b\x2e\x48\x65\xa3\x9d\x4e\x71\x8d\x05\x8a\x9d\x7f\x12\x38\x13\xcf\x5e\x5a\x39\x3c\x20\xce\x30\x01\x8a\x9b\x98\x5e\x2a\x73\xde\x13\x51\x8a\xc8\x12\x2d\x17\xb5\x7b\x55\x4c\xe9\xe4\x9e\xac\xe3\x6b\x88\xd7\xc2\x1e\xf2\xd7\x4a\xc8\x89\xed\x61\x25\xf9\x8f\x15\xfd\xa3\xce\xfc\xff\xd4\x99\x93\x6d\xd9\xf2\x0b\xe1\xc5\xb2\xc3\x98\xcf\xd2\xa0\xe3\x35\xfe\x16\x0d\x1e\x66\xd1\x34\x85\x9f\x78\x31\xb5\xb0\x17\xcd\xf0\xdc\xcb\x86\x58\x6f\xea\x5c\x55\x6b\x0d\xc5\xa1\x0b\xe3\xf7\x0b\x54\xd2\x34\xc8\xe2\x9e\x45\xab\x15\xfc\x48\xef\x55\x34\x06\x4a\xd5\x70\x21\x73\x16\x95\x58\xf1\xae\xb6\x5f\x08\xec\xe6\x76\xc9\x22\x92\x74\xc1\x94\x9b\x17\xfa\xfd\x8c\x34\x9a\x82\xb4\x3a\x3a\xd9\xd1\x25\xac\x2a\xf9\x3e\x38\x74\x8c\x89\xb1\x54\xcd\x6f\x73\x57\x74\x82\x40\xf3\x35\x62\xeb\xff\xc1\x61\x56\xe1\xcc\x46\xb9\xed\xb3\x9b\x67\xd3\x76\x5c\x43\x72\xde\x29\x9f\x87\x13\x5c\x0f\xde\xc3\x8f\xea\x27\xb5\x47\x0d\x4b\x71\x13\xf0\xcd\x17\xa4\xc8\xc3\xd7\x46\x06\xf1\x0b\x0d\x77\x0c\xd9\x0b\x33\xe9\xb1\xa3\x8c\xd2\xa3\x18\x06\xe9\x4e\xc0\xf2\xbc\x18\xbf\x5d\x97\x63\x3b\x77\x73\x7b\x44\xe9\xdf\x2c\xca\x05\xd3\x1b\x00\x80\x57\xc4\xca\x02\x4b\xc8\xaf\x67\xaf\x1d\xc3\x06\xf6\xef\x00\x00\x00\xff\xff\xec\x33\x9d\xf8\xfe\x15\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4250, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x2d, 0x18, 0xaf, 0x17, 0xfe, 0xa0, 0x91, 0xab, 0x63, 0xd2, 0xa4, 0xc4, 0xff, 0xae, 0x35, 0x3b, 0xa8, 0x91, 0xeb, 0x2a, 0xb, 0x54, 0xee, 0x1e, 0xd0, 0x4c, 0x36, 0xb6, 0xce, 0x17, 0x1}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\xab\x80\x0d\x32\xe0\x52\x05\xb6\xee\x21\xab\x1f\xda\x38\x4d\x03\xac\xa9\xe1\xb8\xdd\xe3\x40\x4b\x27\x99\xa8\x44\x0a\x47\x5a\x6e\x60\xf8\x7f\x1f\x8e\x92\x6c\xa5\x8b\xd3\x66\x7d\x68\x48\xf1\xf8\xdd\x77\xbf\x3e\x3a\x4d\xe1\xd2\xe6\x08\x25\x1a\x24\xe5\x31\x87\xf5\x3d\x78\xda\x3a\x27\x61\xfe\x09\x6e\x3f\xad\xe0\x6a\x7e\xb3\x92\x22\x4d\x61\x89\xb4\x35\x46\x9b\xb2\x33\x80\x9d\xae\x2a\xb0\x2d\xd2\x8e\xb4\x47\xf0\x1b\xed\xa0\xd0\x15\x06\xe3\x2f\x48\x4e\x5b\x73\x01\xfb\xbd\xec\xd7\x87\xc3\xe8\x00\xe6\xca\xe3\xf8\x94\xf7\x87\x83\x10\x8d\xca\xbe\xaa\x12\xc1\x21\xb5\x48\x42\xe8\xba\xb1\xe4\x21\x11\xd0\xff\x8b\x8b\x4a\x95\xf1\x69\x6b\xdd\x68\x53\xd4\x3e\x16\x51\x5c\xd9\x92\xff\x18\xf4\xfd\x9f\x74\xe3\x7d\x33\x5e\xa7\x4d\x43\xb6\x88\x85\x88\xd2\x14\x7e\xcb\x61\xa1\xc8\xdf\x8b\x28\x2e\xad\x2d\x2b\x94\xa5\xad\x94\x29\xa5\xa5\x32\x2d\xa9\xc9\x7a\xbb\x15\x87\x78\x87\xd4\xea\x0c\x45\xd4\xac\x21\xde\xef\xe5\xe2\xdd\x4d\xa0\xb8\x50\x7e\x03\x2f\x0f\x07\xf6\xb2\xdf\xcb\x87\x1f\x21\x75\x6d\x76\xe6\x64\xa3\x4c\x5e\x21\xb9\x58\x4c\x84\x68\x15\xc1\x1c\x0b\xb5\xad\xfc\xa5\x35\x85\x2e\xc1\xb5\x99\xec\x96\x42\x14\x5b\x93\x81\x36\xda\x27\x13\xd8\x8b\x88\x33\x21\xef\x3c\x69\x53\x7e\x51\x94\xfc\xfa\xe0\xa2\x9c\xe3\x7a\x5b\xbe\xcd\x73\x9a\x42\x9c\xf3\x5a\xaa\x3c\xa7\x78\x0a\xf1\xc5\xeb\x57\x7f\xbc\xe2\x45\x30\x01\x65\x72\xa8\xd1\x93\xce\x1c\x54\xda\x79\x34\xc0\x96\xe8\x5c\x3c\xf9\x91\x93\x0f\xab\xd5\xa2\xf7\xc1\x69\x1d\xbb\x78\x1d\x5c\xb0\xc1\xb3\x51\xaf\x97\x8b\xcb\x1e\x95\xd3\x3f\x46\xfd\x3d\xa0\x96\xcb\xc5\x25\x24\x8c\x3d\xf9\x2f\x78\xa8\xd5\x67\x87\x80\xa6\xd5\x64\x4d\x8d\xc6\x43\xab\x48\xab\x75\x85\x6e\x0a\xba\x00\x87\x5e\xc2\xfb\x4a\x95\x0e\x36\xaa\x45\x68\x48\x5b\xd2\xfe\x3e\xf4\x33\x5c\x99\x96\xed\x9d\x14\x91\x2e\x02\x30\x5c\xcc\xc0\x3a\x79\x8d\x1e\x4d\x9b\xc4\xf3\xab\x77\x9f\xaf\xff\x79\x3b\x9f\x2f\xe3\xc9\x9f\x9d\xc1\x8b\x19\xc4\x31\x17\x25\x3a\x53\x05\x98\x05\x43\x11\x1d\x02\x6a\xe8\xea\x87\xa8\x8b\x4f\xcb\x15\xe3\x85\xa3\x73\x78\x43\xc2\x61\x06\x45\xed\xe5\x5d\x43\xda\xf8\x22\x89\x2f\x7e\x71\xf1\x34\x5c\x9d\x0c\x2e\x1e\x21\xce\xb7\x7f\x8e\xf7\xc8\xcf\x98\xf6\x23\x98\x5c\xac\x9f\xc3\x1c\xca\x3a\xc2\x3c\xf4\x4d\x7d\x8b\xbb\x2b\x93\x37\x56\x1b\xef\x12\xd7\x8d\x18\x34\x6b\xb9\xdf\xcb\x7e\xe0\xe4\xad\xaa\xf1\x70\xb8\x0b\xba\x30\x09\x63\x71\xbc\xc1\xbe\xd2\x14\xde\x6d\x9d\x36\xe8\x1c\xe4\xb6\x56\xda\xc8\xae\x13\xfe\x26\xd5\x0c\x53\x0b\x3b\xed\x37\x50\xeb\x3c\xaf\x70\xa7\x08\x9d\x84\x3b\x44\x18\x46\x30\x1d\x9f\x94\x56\x44\x03\x93\xd9\xd1\x44\x32\x5c\x8f\x36\x10\xed\x5b\x6e\xa0\x73\x74\x1f\xe1\x91\xe0\xc5\x2c\x30\x7e\x2c\xcc\xc9\x88\xa6\xc3\x0a\x33\x96\xe1\x53\x68\xcf\x64\x7c\x72\xf9\x1d\xe7\x93\xdf\xa3\x09\x7b\x26\xf4\x5b\x32\x70\xfc\xc6\x15\x61\xb1\xdf\x1a\x70\x5e\x91\x77\xa0\xc0\xe0\x0e\x78\xba\x7b\x51\x9e\x42\x18\xbf\x61\xc3\xf2\xa1\x20\x28\x4c\xff\xad\xe3\xec\x37\xc8\x48\x8d\x72\x0e\x73\xc8\x3a\x35\x63\xe3\xca\x96\x25\x52\x57\xf7\xe5\xd6\x24\x59\x31\x56\xb9\xa0\x6c\x43\xde\x2f\x46\x41\xdc\xe2\x6e\xc8\xfb\xe4\xbb\xd4\x9e\x4b\xab\x2e\x20\x2b\x4a\x79\xcd\xaf\x9b\xce\xb8\xa5\x97\xe8\x1a\x6b\x1c\x5e\x99\xcc\xe6\x48\x30\x9b\x81\xd1\x55\xe8\xd5\x1f\x59\xf6\x2d\xc7\x3b\x3e\xef\x4d\x07\x33\x6e\xe6\x50\xc7\x8f\x98\x6d\x94\xd1\x99\xaa\x46\x7d\x40\x94\x31\xcf\x5a\x7d\xc5\x84\x8f\x01\x89\x2c\xf5\x95\xbf\x31\x1e\x89\xb6\x8d\x1f\x62\x95\x22\x2a\xed\x29\xf0\xe3\xf9\x87\xee\x4b\xc2\x70\xfd\xdd\x4e\xc1\x3b\x09\x1c\x2e\x72\x62\xbb\x07\x22\xaa\x6c\x29\x17\xac\x10\x95\x49\x62\x4f\xca\x38\x56\x88\x78\x78\x11\x78\xd1\x6b\x2b\x47\x7f\xd4\x2a\x06\x8f\xea\x90\x7d\x16\xf5\x3e\xf3\xf8\x71\xfb\x8d\x53\x1f\xd5\xb2\x63\x92\xc4\x69\x80\xe9\x1e\xd3\x34\x9e\x76\xe6\x3d\xcd\xf7\x4c\x23\x9c\xc8\x1b\x93\xe3\xb7\xc9\x13\x57\xb3\x3a\xaf\xb4\xc1\xf3\x08\x97\x9d\xc1\x53\x18\xfc\x9f\xae\x9e\xc0\x58\x74\x06\x4f\x61\xb8\xfb\x7a\x6d\xab\xf3\x10\x77\xe1\xfc\x29\x04\x4f\x2a\x7b\x82\xc3\x8a\x8f\x27\x21\xbf\xa1\x29\xde\xbc\xec\x2c\xff\x0a\x15\x7c\x6b\xf2\x90\xe8\xe4\x41\x35\xa6\x50\xb3\xa6\x27\x7d\xc9\xc3\x8b\x7a\xac\xe5\x33\x4a\xce\x17\xbf\xab\xf8\xa0\xf2\x1c\xd0\x66\x10\xa9\x8f\xea\x6b\xe8\xf0\x63\xbb\x0d\xa3\x35\xfd\xc1\x34\x4d\x7e\x22\xaa\xd3\x0f\x86\xcd\x38\xa8\xa0\x28\xff\x27\x28\xbe\x18\x4f\xc7\x31\x0d\xaf\x0c\xb3\xa9\xcc\x94\x47\x8d\x23\x33\xe8\x7b\x3e\x49\xec\xb3\xe6\x11\x63\x5d\x04\xdb\x17\x27\x49\x38\x46\x83\x44\xbc\xed\xc4\x52\x44\x61\xd6\x23\x47\xed\x38\x65\x0c\xd5\xbd\x4e\x63\x85\x8d\xa2\xa0\x50\xe1\x67\xcc\x30\x47\x14\xa6\xa8\x59\xcb\x25\x96\xcc\x88\xce\xbc\x72\x89\x9b\x82\xa3\xf6\x41\xb7\x38\xd9\xe5\xb2\x32\xe3\xf4\x2d\xb7\xe6\x85\x78\x98\x25\xfc\xa6\x39\x41\x6f\x5e\x76\x6a\x71\x10\xe2\xdf\x00\x00\x00\xff\xff\x18\xc4\x01\xaf\xed\x0b\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3270, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0xe9, 0x4d, 0x80, 0xa0, 0x7b, 0xf5, 0xe3, 0xf4, 0xc4, 0xb4, 0x7a, 0x46, 0x72, 0x63, 0x75, 0x62, 0x5f, 0x37, 0xaf, 0x6e, 0xb1, 0x15, 0x35, 0x41, 0x8b, 0x44, 0x83, 0x27, 0x5f, 0x2f, 0xf7}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x28\x16\x56\xe1\xd0\x7b\x0e\x90\x4b\x93\x6e\x5b\xec\xe6\x03\x59\xa3\x7b\x28\x8a\x82\x96\xc6\x12\x61\x89\x54\x48\xca\x89\x97\xd0\x7f\x5f\x0c\xf5\x61\x39\x76\x1c\x1f\x0c\x58\xe4\xe3\xcc\x9b\xf7\x86\x23\xcd\xe7\x70\xad\x53\x84\x0c\x15\x1a\xe1\x30\x85\xe5\x16\x9c\xa9\xad\xe5\x70\x73\x0f\x77\xf7\x0b\xf8\x7c\xf3\x6d\xc1\xd9\x7c\x0e\x8f\x68\x6a\xa5\xa4\xca\x5a\x00\x3c\xcb\xa2\x00\xbd\x41\xf3\x6c\xa4\x43\x70\xb9\xb4\xb0\x92\x05\x06\xf0\x77\x34\x56\x6a\x75\x09\xde\xf3\xee\x7f\xd3\x8c\x36\xe0\x46\x38\x1c\xef\xd2\x73\xd3\x30\x56\x89\x64\x2d\x32\x04\xbb\x49\x18\xe1\x17\x7d\x58\xa8\x8c\xde\xc8\x14\x2d\x58\x34\x1b\x34\x17\x56\xa6\x08\x4b\xa9\x52\xa9\x32\x0b\x2b\x6d\xc0\xe5\x08\xd9\xe3\xc3\x35\x38\x23\x94\xad\xb4\x71\x81\xcb\x37\x07\xb5\x93\x85\xfc\x0f\x6d\x80\x0c\xbb\xf3\xcc\x54\x09\xff\x27\x84\xe3\x8c\xc9\x92\x16\x61\xca\xa2\x89\x42\x37\xcf\x9d\xab\x26\x2c\x9a\x24\x5a\x39\x7c\x71\x13\xc6\xa2\x49\xa6\x75\x56\x20\xcf\x74\x21\x54\xc6\xb5\xc9\x42\x88\x79\x89\x4e\xa4\xc2\x09\xc2\xd0\xc2\x90\x01\x26\x99\x74\x79\xbd\xe4\x89\x2e\xe7\x99\xbe\x58\x4b\x37\xa7\xdf\x3e\x05\x3a\xd6\x97\x4a\x6c\x64\x82\x2c\xaa\x96\x30\xf1\x9e\x3f\x7c\xfa\x16\x68\x3d\x08\x97\xc3\x45\xd3\x4c\x58\x1c\x74\xb9\x15\x6b\xfc\xf2\xf8\x70\xdd\xb2\x87\x52\xac\xd1\x82\x00\x8b\x0e\xf4\x0a\x50\xa5\x95\x96\xca\x59\x10\x1b\x21\x0b\xb1\x2c\x10\x04\xed\x07\x79\xbc\xe7\x5d\x1a\x7e\x27\x4a\x6c\x9a\x5e\x82\x55\xad\x92\x57\x91\xa7\xbb\x50\x9f\xfb\x7f\x33\xd0\x95\x93\x5a\x59\xe0\x9c\xef\xd5\xdb\x89\x79\x1f\xb6\x63\xa8\x96\xfc\x8d\x5c\xe0\x59\x64\x47\x58\x0b\x97\x57\xf0\xe3\xe7\xdb\xc1\x3c\x8b\xa2\x63\xbb\x9f\x70\xa5\x0d\x4e\x7b\x07\x16\xfa\xba\xb5\x2b\x9e\xb1\xa8\x79\x9d\xe3\x0a\x44\x55\xa1\x4a\xa7\x7b\xcb\x43\x39\x9c\xf3\x98\x45\x06\x5d\x6d\x14\xfc\x4e\xd9\xda\x1c\x3e\xd8\xe3\x3d\x2c\xf4\xdf\xfa\x19\x0d\xec\x95\x04\x4d\xc3\x22\xef\x8d\x50\x19\xc2\x07\x49\x85\x0c\xfb\xb7\xe8\x72\x9d\x5a\x42\x44\xde\xf7\xc7\x3f\xc8\x4e\x8b\x4b\xd8\x2f\xe9\x0e\x9f\x3b\xd5\x59\x14\x45\x83\xf2\xdc\xfb\xe1\x48\x6f\xc2\x8c\x10\x37\x98\xe8\x34\x98\x35\x42\x3c\xe2\x53\x8d\xb6\x05\x7c\x56\x47\x01\xb6\xd2\xca\x62\x40\xec\x29\xc1\x39\xa7\x45\xd2\xce\xfb\x0b\xea\x22\x62\xde\xb0\x26\xb4\xdc\x4e\x10\x90\x65\x55\x60\x89\xd4\x15\x74\xa3\xbc\xff\xa2\x83\x14\xc7\xbd\x96\xca\xa1\x59\x89\x04\x99\xdb\x56\x38\x8e\x63\x9d\xa9\x13\x07\x9e\xbd\xaf\xdf\x11\xf9\x00\x5e\xe9\xf7\x55\xa8\xb4\x40\xc3\x76\xe4\x5b\xe6\x5d\x98\x30\x24\x46\xd9\x9d\xde\x15\x72\x7e\x0d\xef\x52\x0d\xb7\x68\x6a\xe1\xe3\x2e\x55\xbc\x0b\x3f\xb0\x9f\x26\xee\x05\xba\xe1\xc2\xbb\xae\x9d\x81\xc1\x27\xf8\x18\xee\xcd\x0e\xdf\x39\xba\xd8\x56\x3d\xa9\x18\xa6\x87\xa0\xd6\xd5\x11\x6a\x06\x68\x8c\xa6\xe4\x2c\xfa\x45\xa1\xab\xb0\x42\xb4\xa9\xa7\x0e\xf4\x6c\xaf\x14\x75\x0b\x71\x0b\x5c\x62\x16\xc9\x55\x38\xf4\xdb\x15\x28\x59\x50\xa8\xfe\x86\x28\x59\x84\x78\xe1\xa2\x75\x6b\x06\x2b\x7e\x0e\xb5\x78\x46\xc7\x59\xc3\xbc\x6f\x8d\x22\x9b\x3a\xa9\xdb\xae\x7e\x5f\xe7\xf9\x1c\x4e\x5d\x00\x90\x34\xf0\x5e\x0d\xfb\xf6\x40\x87\xf8\x93\x8c\x72\xb9\x70\x64\xc3\x06\x0d\x8d\xcb\xd0\xe8\xed\x90\x3c\xec\x37\xd3\x45\x76\x1a\x04\xd4\x16\xcd\x45\xaa\x4b\x21\xd5\x29\x30\x87\x07\x23\x4b\x61\x64\xb1\xa5\x23\xab\xba\x00\xa9\xc2\xa4\x1e\xcd\xdc\x53\x75\x4c\x7f\x1d\x76\x09\xd5\xf2\x88\x4f\xbb\xae\xf4\xd4\x12\xa3\xa7\xb1\xf5\xd4\x52\x97\x57\xfd\x99\x63\xf6\x1c\xb4\xd7\xc8\xcf\xa7\x13\x4e\xb5\xe3\xe5\x2c\xa7\x4e\x4e\xa2\xa3\x56\xb5\x27\x7a\xc8\x5b\x5e\xbd\xef\x42\x97\x22\x78\x76\xc2\xd9\xaa\xd8\x9e\x65\xd5\xc9\x42\x8e\x79\x35\x30\x38\xd3\x2c\x5b\x91\x8a\xfd\xa9\xf3\x6e\xd3\xc8\x2f\x5b\x1d\x33\xec\x2b\x16\x15\x1a\xcb\xda\x1a\x0e\xde\x96\xc7\x67\x51\x99\x0e\x48\x7e\x7b\x13\xbf\x06\x10\x5d\x9a\xa8\xeb\x19\x6c\x02\xe5\xd0\x04\x65\x1a\x66\x84\x5c\xc1\x66\x3c\x33\xda\x0f\x1c\x84\x35\x6e\x83\xdb\x69\x4a\x1f\x9b\xda\xe5\x24\x71\x9f\x85\x06\x74\x29\x1c\x4c\xd7\x31\x3c\xe7\x32\xc9\x03\xb4\x28\xa0\x20\xbb\xba\x28\x42\xa5\xe1\xa5\x43\xdf\x67\xfc\x5a\x28\xad\x64\x22\x8a\xaf\x28\x52\x34\x7f\xe1\x96\x3e\x7f\x5c\x97\xc8\xea\xb6\x65\xa4\x83\x44\x28\x58\x62\x1f\x22\x49\xd0\x5a\x4c\x29\x37\x4a\x97\xa3\xe9\x32\xd3\x3e\x49\x71\x35\xd4\xfa\xaf\x74\xf9\x77\x51\xd4\xd8\x8e\x44\xaa\xf5\xc7\x1f\x3f\xe3\x77\x81\x6f\xb0\x9b\xae\xe3\x5d\x84\xf0\x6e\x1d\xac\x4b\xdc\x0b\x6b\xd8\xff\x01\x00\x00\xff\xff\x71\x92\xdd\x9a\x92\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 2962, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xc7, 0xff, 0xf, 0x16, 0xfd, 0xd8, 0x43, 0xfc, 0x25, 0x2b, 0x9c, 0xfe, 0x3c, 0xf, 0x3a, 0x3e, 0xc7, 0x21, 0xdf, 0x32, 0x41, 0x25, 0x39, 0x7d, 0x4b, 0xb6, 0xc2, 0xc, 0x27, 0x81, 0x3c}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/config.gotemplate":             svcConfigGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate": {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate": {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"config.gotemplate": {svcConfigGotemplate, map[string]*bintree{}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
